{"version":3,"sourceRoot":"","sources":["crbug-402769806.ts"],"sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport * as FloatingButton from '../../ui/components/floating_button/floating_button.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as Snippets from '../snippets/snippets.js';\nimport {PanelUtils} from '../utils/utils.js';\n\nimport navigatorTreeStyles from './navigatorTree.css.js';\nimport navigatorViewStyles from './navigatorView.css.js';\nimport {SearchSources} from './SearchSourcesView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  searchInFolder: 'Search in folder',\n  /**\n   *@description Search label in Navigator View of the Sources panel\n   */\n  searchInAllFiles: 'Search in all files',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  noDomain: '(no domain)',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  authored: 'Authored',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  authoredTooltip: 'Contains original sources',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  deployed: 'Deployed',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  deployedTooltip: 'Contains final sources the browser sees',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  excludeThisFolder: 'Exclude this folder?',\n  /**\n   *@description Text in a dialog which appears when users click on 'Exclude from Workspace' menu item\n   */\n  folderWillNotBeShown: 'This folder and its contents will not be shown in workspace.',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  deleteThisFile: 'Delete this file?',\n  /**\n   *@description A context menu item in the Navigator View of the Sources panel\n   */\n  rename: 'Rename…',\n  /**\n   *@description A context menu item in the Navigator View of the Sources panel\n   */\n  makeACopy: 'Make a copy…',\n  /**\n   *@description Text to delete something\n   */\n  delete: 'Delete',\n  /**\n   *@description A button text to confirm an action to remove a folder. This is not the same as delete. It removes the folder from UI but do not delete them.\n   */\n  remove: 'Remove',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   */\n  deleteFolder: 'Delete this folder and its contents?',\n  /**\n   *@description Text in Navigator View of the Sources panel. A confirmation message on action to delete a folder or file.\n   */\n  actionCannotBeUndone: 'This action cannot be undone.',\n  /**\n   *@description A context menu item in the Navigator View of the Sources panel\n   */\n  openFolder: 'Open folder',\n  /**\n   *@description A context menu item in the Navigator View of the Sources panel\n   */\n  newFile: 'New file',\n  /**\n   *@description A context menu item in the Navigator View of the Sources panel to exclude a folder from workspace\n   */\n  excludeFolder: 'Exclude from workspace',\n  /**\n   *@description A context menu item in the Navigator View of the Sources panel\n   */\n  removeFolderFromWorkspace: 'Remove from workspace',\n  /**\n   *@description Text in Navigator View of the Sources panel\n   * @example {a-folder-name} PH1\n   */\n  areYouSureYouWantToRemoveThis: 'Remove ‘{PH1}’ from Workspace?',\n  /**\n   *@description Text in Navigator View of the Sources panel. Warning message when user remove a folder.\n   */\n  workspaceStopSyncing: 'This will stop syncing changes from DevTools to your sources.',\n  /**\n   *@description Name of an item from source map\n   *@example {compile.html} PH1\n   */\n  sFromSourceMap: '{PH1} (from source map)',\n  /**\n   *@description Name of an item that is on the ignore list\n   *@example {compile.html} PH1\n   */\n  sIgnoreListed: '{PH1} (ignore listed)',\n} as const;\n\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/NavigatorView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport const Types = {\n  Authored: 'authored',\n  Deployed: 'deployed',\n  Domain: 'domain',\n  File: 'file',\n  FileSystem: 'fs',\n  FileSystemFolder: 'fs-folder',\n  Frame: 'frame',\n  NetworkFolder: 'nw-folder',\n  Root: 'root',\n  Worker: 'worker',\n};\n\nconst TYPE_ORDERS = new Map([\n  [Types.Root, 1],\n  [Types.Authored, 1],\n  [Types.Deployed, 5],\n  [Types.Domain, 10],\n  [Types.FileSystemFolder, 1],\n  [Types.NetworkFolder, 1],\n  [Types.File, 10],\n  [Types.Frame, 70],\n  [Types.Worker, 90],\n  [Types.FileSystem, 100],\n]);\n\nexport class NavigatorView extends UI.Widget.VBox implements SDK.TargetManager.Observer {\n  private placeholder: UI.Widget.Widget|null;\n  scriptsTree: UI.TreeOutline.TreeOutlineInShadow;\n  private readonly uiSourceCodeNodes:\n      Platform.MapUtilities.Multimap<Workspace.UISourceCode.UISourceCode, NavigatorUISourceCodeTreeNode>;\n  private readonly subfolderNodes: Map<string, NavigatorFolderTreeNode>;\n  private readonly rootNode: NavigatorRootTreeNode;\n  private readonly frameNodes: Map<SDK.ResourceTreeModel.ResourceTreeFrame, NavigatorGroupTreeNode>;\n  private authoredNode?: NavigatorGroupTreeNode;\n  private deployedNode?: NavigatorGroupTreeNode;\n  private navigatorGroupByFolderSetting: Common.Settings.Setting<boolean>;\n  private navigatorGroupByAuthoredExperiment?: string;\n  private workspaceInternal!: Workspace.Workspace.WorkspaceImpl;\n  private groupByFrame?: boolean;\n  private groupByAuthored?: boolean;\n  private groupByDomain?: boolean;\n  private groupByFolder?: boolean;\n  constructor(jslogContext: string, enableAuthoredGrouping?: boolean) {\n    super(true);\n    this.registerRequiredCSS(navigatorViewStyles);\n\n    this.placeholder = null;\n    this.scriptsTree = new UI.TreeOutline.TreeOutlineInShadow(UI.TreeOutline.TreeVariant.NAVIGATION_TREE);\n    this.scriptsTree.registerRequiredCSS(navigatorTreeStyles);\n\n    this.scriptsTree.hideOverflow();\n    this.scriptsTree.setComparator(NavigatorView.treeElementsCompare);\n    this.scriptsTree.setFocusable(false);\n    this.contentElement.setAttribute('jslog', `${VisualLogging.pane(jslogContext).track({resize: true})}`);\n    this.contentElement.appendChild(this.scriptsTree.element);\n    this.setDefaultFocusedElement(this.scriptsTree.element);\n\n    this.uiSourceCodeNodes = new Platform.MapUtilities.Multimap();\n    this.subfolderNodes = new Map();\n\n    this.rootNode = new NavigatorRootTreeNode(this);\n    this.rootNode.populate();\n\n    this.frameNodes = new Map();\n\n    this.contentElement.addEventListener('contextmenu', this.handleContextMenu.bind(this), false);\n    UI.ShortcutRegistry.ShortcutRegistry.instance().addShortcutListener(\n        this.contentElement, {'sources.rename': this.renameShortcut.bind(this)});\n\n    this.navigatorGroupByFolderSetting = Common.Settings.Settings.instance().moduleSetting('navigator-group-by-folder');\n    this.navigatorGroupByFolderSetting.addChangeListener(this.groupingChanged.bind(this));\n    if (enableAuthoredGrouping) {\n      this.navigatorGroupByAuthoredExperiment = Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING;\n    }\n\n    Bindings.IgnoreListManager.IgnoreListManager.instance().addChangeListener(this.ignoreListChanged.bind(this));\n\n    this.initGrouping();\n\n    Persistence.Persistence.PersistenceImpl.instance().addEventListener(\n        Persistence.Persistence.Events.BindingCreated, this.onBindingChanged, this);\n    Persistence.Persistence.PersistenceImpl.instance().addEventListener(\n        Persistence.Persistence.Events.BindingRemoved, this.onBindingChanged, this);\n    Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance().addEventListener(\n        Persistence.NetworkPersistenceManager.Events.REQUEST_FOR_HEADER_OVERRIDES_FILE_CHANGED,\n        this.#onRequestsForHeaderOverridesFileChanged, this);\n    SDK.TargetManager.TargetManager.instance().addEventListener(\n        SDK.TargetManager.Events.NAME_CHANGED, this.targetNameChanged, this);\n\n    SDK.TargetManager.TargetManager.instance().observeTargets(this);\n    this.resetWorkspace(Workspace.Workspace.WorkspaceImpl.instance());\n    this.workspaceInternal.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n    Bindings.NetworkProject.NetworkProjectManager.instance().addEventListener(\n        Bindings.NetworkProject.Events.FRAME_ATTRIBUTION_ADDED, this.frameAttributionAdded, this);\n    Bindings.NetworkProject.NetworkProjectManager.instance().addEventListener(\n        Bindings.NetworkProject.Events.FRAME_ATTRIBUTION_REMOVED, this.frameAttributionRemoved, this);\n  }\n\n  private static treeElementOrder(treeElement: UI.TreeOutline.TreeElement): number {\n    if (boostOrderForNode.has(treeElement)) {\n      return 0;\n    }\n\n    const actualElement = (treeElement as NavigatorSourceTreeElement);\n\n    let order = TYPE_ORDERS.get(actualElement.nodeType) || 0;\n    if (actualElement.uiSourceCode) {\n      const contentType = actualElement.uiSourceCode.contentType();\n      if (contentType.isDocument()) {\n        order += 3;\n      } else if (contentType.isScript()) {\n        order += 5;\n      } else if (contentType.isStyleSheet()) {\n        order += 10;\n      } else {\n        order += 15;\n      }\n    }\n\n    return order;\n  }\n\n  static appendSearchItem(contextMenu: UI.ContextMenu.ContextMenu, path: string): void {\n    const searchLabel = path ? i18nString(UIStrings.searchInFolder) : i18nString(UIStrings.searchInAllFiles);\n    const searchSources = new SearchSources(path && `file:${path}`);\n    contextMenu.viewSection().appendItem(\n        searchLabel, () => Common.Revealer.reveal(searchSources),\n        {jslogContext: path ? 'search-in-folder' : 'search-in-all-files'});\n  }\n\n  private static treeElementsCompare(\n      treeElement1: UI.TreeOutline.TreeElement, treeElement2: UI.TreeOutline.TreeElement): number {\n    const typeWeight1 = NavigatorView.treeElementOrder(treeElement1);\n    const typeWeight2 = NavigatorView.treeElementOrder(treeElement2);\n\n    if (typeWeight1 > typeWeight2) {\n      return 1;\n    }\n    if (typeWeight1 < typeWeight2) {\n      return -1;\n    }\n    return Platform.StringUtilities.naturalOrderComparator(treeElement1.titleAsText(), treeElement2.titleAsText());\n  }\n\n  setPlaceholder(placeholder: UI.Widget.Widget): void {\n    console.assert(!this.placeholder, 'A placeholder widget was already set');\n    this.placeholder = placeholder;\n    placeholder.show(this.contentElement, this.contentElement.firstChild);\n    updateVisibility.call(this);\n    this.scriptsTree.addEventListener(UI.TreeOutline.Events.ElementAttached, updateVisibility.bind(this));\n    this.scriptsTree.addEventListener(UI.TreeOutline.Events.ElementsDetached, updateVisibility.bind(this));\n\n    function updateVisibility(this: NavigatorView): void {\n      const showTree = this.scriptsTree.firstChild();\n      if (showTree) {\n        placeholder.hideWidget();\n      } else {\n        placeholder.showWidget();\n      }\n      this.scriptsTree.element.classList.toggle('hidden', !showTree);\n    }\n  }\n\n  private onBindingChanged(event: Common.EventTarget.EventTargetEvent<Persistence.Persistence.PersistenceBinding>):\n      void {\n    const binding = event.data;\n\n    let isFromSourceMap = false;\n    // Update UISourceCode titles.\n    const networkNodes = this.uiSourceCodeNodes.get(binding.network);\n    for (const networkNode of networkNodes) {\n      networkNode.updateTitle();\n      isFromSourceMap ||= networkNode.uiSourceCode().contentType().isFromSourceMap();\n    }\n    const fileSystemNodes = this.uiSourceCodeNodes.get(binding.fileSystem);\n    for (const fileSystemNode of fileSystemNodes) {\n      fileSystemNode.updateTitle();\n      isFromSourceMap ||= fileSystemNode.uiSourceCode().contentType().isFromSourceMap();\n    }\n\n    // Update folder titles.\n    const pathTokens =\n        Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(binding.fileSystem);\n    let folderPath = Platform.DevToolsPath.EmptyEncodedPathString;\n    for (let i = 0; i < pathTokens.length - 1; ++i) {\n      folderPath = Common.ParsedURL.ParsedURL.concatenate(folderPath, pathTokens[i]);\n      const folderId = this.folderNodeId(\n          binding.fileSystem.project(), null, null, binding.fileSystem.origin(), isFromSourceMap, folderPath);\n      const folderNode = this.subfolderNodes.get(folderId);\n      if (folderNode) {\n        folderNode.updateTitle();\n      }\n      folderPath = Common.ParsedURL.ParsedURL.concatenate(folderPath, '/');\n    }\n\n    // Update fileSystem root title.\n    const fileSystemRoot = this.rootOrDeployedNode().child(binding.fileSystem.project().id());\n    if (fileSystemRoot) {\n      fileSystemRoot.updateTitle();\n    }\n  }\n\n  #onRequestsForHeaderOverridesFileChanged(\n      event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const headersFileUiSourceCode = event.data;\n    const networkNodes = this.uiSourceCodeNodes.get(headersFileUiSourceCode);\n    for (const networkNode of networkNodes) {\n      networkNode.updateTitle();\n    }\n  }\n\n  override focus(): void {\n    this.scriptsTree.focus();\n  }\n\n  /**\n   * Central place to add elements to the tree to\n   * enable focus if the tree has elements\n   */\n  appendChild(parent: UI.TreeOutline.TreeElement, child: UI.TreeOutline.TreeElement): void {\n    this.scriptsTree.setFocusable(true);\n    parent.appendChild(child);\n  }\n\n  /**\n   * Central place to remove elements from the tree to\n   * disable focus if the tree is empty\n   */\n  removeChild(parent: UI.TreeOutline.TreeElement, child: UI.TreeOutline.TreeElement): void {\n    parent.removeChild(child);\n    if (this.scriptsTree.rootElement().childCount() === 0) {\n      this.scriptsTree.setFocusable(false);\n    }\n  }\n\n  private resetWorkspace(workspace: Workspace.Workspace.WorkspaceImpl): void {\n    // Clear old event listeners first.\n    if (this.workspaceInternal) {\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAddedCallback, this);\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemovedCallback, this);\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.ProjectAdded, this.projectAddedCallback, this);\n      this.workspaceInternal.removeEventListener(\n          Workspace.Workspace.Events.ProjectRemoved, this.projectRemovedCallback, this);\n    }\n\n    this.workspaceInternal = workspace;\n    this.workspaceInternal.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAddedCallback, this);\n    this.workspaceInternal.addEventListener(\n        Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemovedCallback, this);\n    this.workspaceInternal.addEventListener(Workspace.Workspace.Events.ProjectAdded, this.projectAddedCallback, this);\n    this.workspaceInternal.addEventListener(\n        Workspace.Workspace.Events.ProjectRemoved, this.projectRemovedCallback, this);\n    this.workspaceInternal.projects().forEach(this.projectAdded.bind(this));\n    this.computeUniqueFileSystemProjectNames();\n  }\n\n  private projectAddedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    this.projectAdded(project);\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.computeUniqueFileSystemProjectNames();\n    }\n  }\n\n  private projectRemovedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    this.removeProject(project);\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      this.computeUniqueFileSystemProjectNames();\n    }\n  }\n\n  workspace(): Workspace.Workspace.WorkspaceImpl {\n    return this.workspaceInternal;\n  }\n\n  acceptProject(project: Workspace.Workspace.Project): boolean {\n    return !project.isServiceProject();\n  }\n\n  private frameAttributionAdded(\n      event: Common.EventTarget.EventTargetEvent<Bindings.NetworkProject.FrameAttributionEvent>): void {\n    const {uiSourceCode} = event.data;\n    if (!this.acceptsUISourceCode(uiSourceCode)) {\n      return;\n    }\n\n    const addedFrame = (event.data.frame as SDK.ResourceTreeModel.ResourceTreeFrame | null);\n    // This event does not happen for UISourceCodes without initial attribution.\n    this.addUISourceCodeNode(uiSourceCode, addedFrame);\n  }\n\n  private frameAttributionRemoved(\n      event: Common.EventTarget.EventTargetEvent<Bindings.NetworkProject.FrameAttributionEvent>): void {\n    const {uiSourceCode} = event.data;\n    if (!this.acceptsUISourceCode(uiSourceCode)) {\n      return;\n    }\n\n    const removedFrame = (event.data.frame as SDK.ResourceTreeModel.ResourceTreeFrame | null);\n    const node = Array.from(this.uiSourceCodeNodes.get(uiSourceCode)).find(node => node.frame() === removedFrame);\n    if (node) {\n      this.removeUISourceCodeNode(node);\n    }\n  }\n\n  private acceptsUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.acceptProject(uiSourceCode.project());\n  }\n\n  private addUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.JUST_MY_CODE) &&\n        Bindings.IgnoreListManager.IgnoreListManager.instance().isUserOrSourceMapIgnoreListedUISourceCode(\n            uiSourceCode)) {\n      return;\n    }\n\n    if (!this.acceptsUISourceCode(uiSourceCode)) {\n      return;\n    }\n\n    if (uiSourceCode.isFetchXHR()) {\n      return;\n    }\n\n    const frames = Bindings.NetworkProject.NetworkProject.framesForUISourceCode(uiSourceCode);\n    if (frames.length) {\n      for (const frame of frames) {\n        this.addUISourceCodeNode(uiSourceCode, frame);\n      }\n    } else {\n      this.addUISourceCodeNode(uiSourceCode, null);\n    }\n    this.uiSourceCodeAdded(uiSourceCode);\n  }\n\n  private addUISourceCodeNode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, frame: SDK.ResourceTreeModel.ResourceTreeFrame|null): void {\n    const isFromSourceMap = uiSourceCode.contentType().isFromSourceMap();\n    let path;\n    if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.FileSystem) {\n      path = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(uiSourceCode).slice(0, -1);\n    } else {\n      path = Common.ParsedURL.ParsedURL.extractPath(uiSourceCode.url()).split('/').slice(1, -1) as\n          Platform.DevToolsPath.EncodedPathString[];\n    }\n\n    const project = uiSourceCode.project();\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(uiSourceCode);\n    const folderNode =\n        this.folderNode(uiSourceCode, project, target, frame, uiSourceCode.origin(), path, isFromSourceMap);\n    const uiSourceCodeNode = new NavigatorUISourceCodeTreeNode(this, uiSourceCode, frame);\n    const existingNode = folderNode.child(uiSourceCodeNode.id);\n    if (existingNode && existingNode instanceof NavigatorUISourceCodeTreeNode) {\n      this.uiSourceCodeNodes.set(uiSourceCode, existingNode);\n    } else {\n      folderNode.appendChild(uiSourceCodeNode);\n      this.uiSourceCodeNodes.set(uiSourceCode, uiSourceCodeNode);\n      uiSourceCodeNode.updateTitleBubbleUp();\n    }\n    this.selectDefaultTreeNode();\n  }\n\n  uiSourceCodeAdded(_uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n  }\n\n  private uiSourceCodeAddedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      void {\n    const uiSourceCode = event.data;\n    this.addUISourceCode(uiSourceCode);\n  }\n\n  private uiSourceCodeRemovedCallback(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>):\n      void {\n    this.removeUISourceCodes([event.data]);\n  }\n\n  tryAddProject(project: Workspace.Workspace.Project): void {\n    this.projectAdded(project);\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.addUISourceCode(uiSourceCode);\n    }\n  }\n\n  private projectAdded(project: Workspace.Workspace.Project): void {\n    const rootOrDeployed = this.rootOrDeployedNode();\n    if (!this.acceptProject(project) || project.type() !== Workspace.Workspace.projectTypes.FileSystem ||\n        Snippets.ScriptSnippetFileSystem.isSnippetsProject(project) || rootOrDeployed.child(project.id())) {\n      return;\n    }\n    rootOrDeployed.appendChild(\n        new NavigatorGroupTreeNode(this, project, project.id(), Types.FileSystem, project.displayName()));\n    this.selectDefaultTreeNode();\n  }\n\n  // TODO(einbinder) remove this code after crbug.com/964075 is fixed\n  private selectDefaultTreeNode(): void {\n    const children = this.rootNode.children();\n    if (children.length && !this.scriptsTree.selectedTreeElement) {\n      children[0].treeNode().select(true /* omitFocus */, false /* selectedByUser */);\n    }\n  }\n\n  private computeUniqueFileSystemProjectNames(): void {\n    const fileSystemProjects = this.workspaceInternal.projectsForType(Workspace.Workspace.projectTypes.FileSystem);\n    if (!fileSystemProjects.length) {\n      return;\n    }\n\n    const reversedIndex = Common.Trie.Trie.newArrayTrie<string[]>();\n    const reversedPaths = [];\n    for (const project of fileSystemProjects) {\n      const fileSystem = (project as Persistence.FileSystemWorkspaceBinding.FileSystem);\n      const reversedPathParts = fileSystem.fileSystemPath().split('/').reverse();\n      reversedPaths.push(reversedPathParts);\n      reversedIndex.add(reversedPathParts);\n    }\n\n    const rootOrDeployed = this.rootOrDeployedNode();\n\n    for (let i = 0; i < fileSystemProjects.length; ++i) {\n      const reversedPath = reversedPaths[i];\n      const project = fileSystemProjects[i];\n      reversedIndex.remove(reversedPath);\n      const commonPrefix = reversedIndex.longestPrefix(reversedPath, false /* fullWordOnly */);\n      reversedIndex.add(reversedPath);\n      const prefixPath = reversedPath.slice(0, commonPrefix.length + 1);\n      const path = Common.ParsedURL.ParsedURL.encodedPathToRawPathString(\n          prefixPath.reverse().join('/') as Platform.DevToolsPath.EncodedPathString);\n\n      const fileSystemNode = rootOrDeployed.child(project.id());\n      if (fileSystemNode) {\n        fileSystemNode.setTitle(path);\n      }\n    }\n  }\n\n  removeProject(project: Workspace.Workspace.Project): void {\n    this.removeUISourceCodes(project.uiSourceCodes());\n    if (project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystemNode = this.rootNode.child(project.id());\n    if (!fileSystemNode) {\n      return;\n    }\n    this.rootNode.removeChild(fileSystemNode);\n  }\n\n  private folderNodeId(\n      project: Workspace.Workspace.Project, target: SDK.Target.Target|null,\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame|null, projectOrigin: string, isFromSourceMap: boolean,\n      path: Platform.DevToolsPath.EncodedPathString): string {\n    const projectId = project.type() === Workspace.Workspace.projectTypes.FileSystem ? project.id() : '';\n    let targetId = target && !(this.groupByAuthored && isFromSourceMap) ? target.id() : '';\n    let frameId = this.groupByFrame && frame ? frame.id : '';\n    if (this.groupByAuthored) {\n      if (isFromSourceMap) {\n        targetId = 'Authored';\n        frameId = '';\n      } else {\n        targetId = 'Deployed:' + targetId;\n      }\n    }\n    return targetId + ':' + projectId + ':' + frameId + ':' + projectOrigin + ':' + path;\n  }\n\n  private folderNode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, project: Workspace.Workspace.Project,\n      target: SDK.Target.Target|null, frame: SDK.ResourceTreeModel.ResourceTreeFrame|null,\n      projectOrigin: Platform.DevToolsPath.UrlString, path: Platform.DevToolsPath.EncodedPathString[],\n      fromSourceMap: boolean): NavigatorTreeNode {\n    if (Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(uiSourceCode)) {\n      return this.rootNode;\n    }\n\n    if (target && !this.groupByFolder && !fromSourceMap) {\n      return this.domainNode(uiSourceCode, project, target, frame, projectOrigin);\n    }\n\n    const folderPath = Common.ParsedURL.ParsedURL.join(path, '/');\n    const folderId = this.folderNodeId(project, target, frame, projectOrigin, fromSourceMap, folderPath);\n    let folderNode = this.subfolderNodes.get(folderId);\n    if (folderNode) {\n      return folderNode;\n    }\n\n    if (!path.length) {\n      if (target) {\n        return this.domainNode(uiSourceCode, project, target, frame, projectOrigin);\n      }\n      return this.rootOrDeployedNode().child(project.id()) as NavigatorTreeNode;\n    }\n\n    const parentNode =\n        this.folderNode(uiSourceCode, project, target, frame, projectOrigin, path.slice(0, -1), fromSourceMap);\n    let type: string = Types.NetworkFolder;\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      type = Types.FileSystemFolder;\n    }\n    const name = Common.ParsedURL.ParsedURL.encodedPathToRawPathString(path[path.length - 1]);\n\n    folderNode = new NavigatorFolderTreeNode(this, project, folderId, type, folderPath, name, projectOrigin);\n    this.subfolderNodes.set(folderId, folderNode);\n    parentNode.appendChild(folderNode);\n    return folderNode;\n  }\n\n  private domainNode(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, project: Workspace.Workspace.Project,\n      target: SDK.Target.Target, frame: SDK.ResourceTreeModel.ResourceTreeFrame|null,\n      projectOrigin: string): NavigatorTreeNode {\n    const isAuthored = uiSourceCode.contentType().isFromSourceMap();\n    const frameNode = this.frameNode(project, target, frame, isAuthored);\n    if (!this.groupByDomain) {\n      return frameNode;\n    }\n    let domainNode = frameNode.child(projectOrigin);\n    if (domainNode) {\n      return domainNode;\n    }\n\n    domainNode = new NavigatorGroupTreeNode(\n        this, project, projectOrigin, Types.Domain, this.computeProjectDisplayName(target, projectOrigin));\n    if (frame && projectOrigin === Common.ParsedURL.ParsedURL.extractOrigin(frame.url)) {\n      boostOrderForNode.add(domainNode.treeNode());\n    }\n    frameNode.appendChild(domainNode);\n    if (isAuthored && this.groupByAuthored) {\n      domainNode.treeNode().expand();\n    }\n    return domainNode;\n  }\n\n  private frameNode(\n      project: Workspace.Workspace.Project, target: SDK.Target.Target,\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame|null, isAuthored: boolean): NavigatorTreeNode {\n    if (!this.groupByFrame || !frame || (this.groupByAuthored && isAuthored)) {\n      return this.targetNode(project, target, isAuthored);\n    }\n\n    let frameNode = this.frameNodes.get(frame);\n    if (frameNode) {\n      return frameNode;\n    }\n\n    frameNode =\n        new NavigatorGroupTreeNode(this, project, target.id() + ':' + frame.id, Types.Frame, frame.displayName());\n    frameNode.setHoverCallback(hoverCallback);\n    this.frameNodes.set(frame, frameNode);\n\n    const parentFrame = frame.parentFrame();\n    this.frameNode(project, parentFrame ? parentFrame.resourceTreeModel().target() : target, parentFrame, isAuthored)\n        .appendChild(frameNode);\n    if (!parentFrame) {\n      boostOrderForNode.add(frameNode.treeNode());\n      frameNode.treeNode().expand();\n    }\n\n    function hoverCallback(hovered: boolean): void {\n      if (hovered) {\n        const overlayModel = target.model(SDK.OverlayModel.OverlayModel);\n        if (overlayModel && frame) {\n          overlayModel.highlightFrame(frame.id);\n        }\n      } else {\n        SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n      }\n    }\n    return frameNode;\n  }\n\n  private targetNode(project: Workspace.Workspace.Project, target: SDK.Target.Target, isAuthored: boolean):\n      NavigatorTreeNode {\n    if (this.groupByAuthored && isAuthored) {\n      if (!this.authoredNode) {\n        this.authoredNode = new NavigatorGroupTreeNode(\n            this, null, 'group:Authored', Types.Authored, i18nString(UIStrings.authored),\n            i18nString(UIStrings.authoredTooltip));\n        this.rootNode.appendChild(this.authoredNode);\n        this.authoredNode.treeNode().expand();\n      }\n      return this.authoredNode;\n    }\n\n    const rootOrDeployed = this.rootOrDeployedNode();\n    if (target === SDK.TargetManager.TargetManager.instance().scopeTarget()) {\n      return rootOrDeployed;\n    }\n\n    let targetNode = rootOrDeployed.child('target:' + target.id());\n    if (!targetNode) {\n      targetNode = new NavigatorGroupTreeNode(\n          this, project, 'target:' + target.id(), target.type() === SDK.Target.Type.FRAME ? Types.Frame : Types.Worker,\n          target.name());\n      rootOrDeployed.appendChild(targetNode);\n    }\n    return targetNode;\n  }\n\n  private rootOrDeployedNode(): NavigatorTreeNode {\n    if (this.groupByAuthored) {\n      if (!this.deployedNode) {\n        this.deployedNode = new NavigatorGroupTreeNode(\n            this, null, 'group:Deployed', Types.Deployed, i18nString(UIStrings.deployed),\n            i18nString(UIStrings.deployedTooltip));\n        this.rootNode.appendChild(this.deployedNode);\n      }\n      return this.deployedNode;\n    }\n    return this.rootNode;\n  }\n\n  private computeProjectDisplayName(target: SDK.Target.Target, projectOrigin: string): string {\n    const runtimeModel = target.model(SDK.RuntimeModel.RuntimeModel);\n    const executionContexts = runtimeModel ? runtimeModel.executionContexts() : [];\n\n    let matchingContextName: string|null = null;\n\n    for (const context of executionContexts) {\n      if (!context.origin || !projectOrigin.startsWith(context.origin)) {\n        continue;\n      }\n\n      // If the project origin matches the default context origin then we should break out and use the\n      // project origin for the display name.\n      if (context.isDefault) {\n        matchingContextName = null;\n        break;\n      }\n\n      if (!context.name) {\n        continue;\n      }\n\n      matchingContextName = context.name;\n    }\n\n    if (matchingContextName) {\n      return matchingContextName;\n    }\n\n    if (!projectOrigin) {\n      return i18nString(UIStrings.noDomain);\n    }\n\n    const parsedURL = new Common.ParsedURL.ParsedURL(projectOrigin);\n    const prettyURL = parsedURL.isValid ? parsedURL.host + (parsedURL.port ? (':' + parsedURL.port) : '') : '';\n\n    return (prettyURL || projectOrigin);\n  }\n\n  revealUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode, select?: boolean): NavigatorUISourceCodeTreeNode\n      |null {\n    const nodes = this.uiSourceCodeNodes.get(uiSourceCode);\n    if (nodes.size === 0) {\n      return null;\n    }\n    const node = nodes.values().next().value;\n    if (!node) {\n      return null;\n    }\n    if (this.scriptsTree.selectedTreeElement) {\n      // If the tree outline is being marked as \"being edited\" (i.e. we're renaming a file\n      // or chosing the name for a new snippet), we shall not proceed with revealing here,\n      // as that will steal focus from the input widget and thus cancel editing. The\n      // test/e2e/snippets/breakpoint_test.ts exercises this.\n      if (UI.UIUtils.isBeingEdited(this.scriptsTree.selectedTreeElement.treeOutline?.element)) {\n        return null;\n      }\n      this.scriptsTree.selectedTreeElement.deselect();\n    }\n    // TODO(dgozman): figure out revealing multiple.\n    node.reveal(select);\n    return node;\n  }\n\n  sourceSelected(uiSourceCode: Workspace.UISourceCode.UISourceCode, focusSource: boolean): void {\n    void Common.Revealer.reveal(uiSourceCode, !focusSource);\n  }\n\n  #isUISourceCodeOrAnyAncestorSelected(node: NavigatorUISourceCodeTreeNode): boolean {\n    const selectedTreeElement = (this.scriptsTree.selectedTreeElement as NavigatorSourceTreeElement | null);\n    const selectedNode = selectedTreeElement?.node;\n    let currentNode: NavigatorTreeNode|null = node;\n    while (currentNode) {\n      if (currentNode === selectedNode) {\n        return true;\n      }\n      currentNode = currentNode.parent;\n      if (!(node instanceof NavigatorGroupTreeNode || node instanceof NavigatorFolderTreeElement)) {\n        break;\n      }\n    }\n    return false;\n  }\n\n  private removeUISourceCodes(uiSourceCodes: Iterable<Workspace.UISourceCode.UISourceCode>): void {\n    const nodesWithSelectionOnPath: NavigatorUISourceCodeTreeNode[] = [];\n    // First we remove source codes without any selection on their path to root, and only then\n    // the ones with selection. This to avoid layout work associated with moving the selection\n    // around (crbug.com/1409025).\n    for (const uiSourceCode of uiSourceCodes) {\n      const nodes = this.uiSourceCodeNodes.get(uiSourceCode);\n      for (const node of nodes) {\n        if (this.#isUISourceCodeOrAnyAncestorSelected(node)) {\n          nodesWithSelectionOnPath.push(node);\n        } else {\n          this.removeUISourceCodeNode(node);\n        }\n      }\n    }\n    nodesWithSelectionOnPath.forEach(this.removeUISourceCodeNode.bind(this));\n  }\n\n  private removeUISourceCodeNode(node: NavigatorUISourceCodeTreeNode): void {\n    const uiSourceCode = node.uiSourceCode();\n    this.uiSourceCodeNodes.delete(uiSourceCode, node);\n    const project = uiSourceCode.project();\n    const target = Bindings.NetworkProject.NetworkProject.targetForUISourceCode(uiSourceCode);\n    let frame = node.frame();\n\n    let parentNode: (NavigatorTreeNode|null) = node.parent;\n    if (!parentNode) {\n      return;\n    }\n    parentNode.removeChild(node);\n    let currentNode: (NavigatorTreeNode|null) = parentNode;\n\n    while (currentNode) {\n      parentNode = currentNode.parent;\n      if (!parentNode) {\n        break;\n      }\n      if ((parentNode === this.rootNode || parentNode === this.deployedNode) &&\n          project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n        break;\n      }\n      if (!(currentNode instanceof NavigatorGroupTreeNode || currentNode instanceof NavigatorFolderTreeNode)) {\n        break;\n      }\n      if (!currentNode.isEmpty()) {\n        currentNode.updateTitleBubbleUp();\n        break;\n      }\n      if (currentNode.type === Types.Frame) {\n        this.discardFrame(\n            frame as SDK.ResourceTreeModel.ResourceTreeFrame,\n            Boolean(this.groupByAuthored) && uiSourceCode.contentType().isFromSourceMap());\n        frame = (frame as SDK.ResourceTreeModel.ResourceTreeFrame).parentFrame();\n      } else {\n        const folderId = this.folderNodeId(\n            project, target, frame, uiSourceCode.origin(), uiSourceCode.contentType().isFromSourceMap(),\n            currentNode instanceof NavigatorFolderTreeNode && currentNode.folderPath ||\n                Platform.DevToolsPath.EmptyEncodedPathString);\n        this.subfolderNodes.delete(folderId);\n        parentNode.removeChild(currentNode);\n      }\n\n      if (currentNode === this.authoredNode) {\n        this.authoredNode = undefined;\n      } else if (currentNode === this.deployedNode) {\n        this.deployedNode = undefined;\n      }\n\n      currentNode = parentNode;\n    }\n  }\n\n  reset(tearDownOnly?: boolean): void {\n    for (const node of this.uiSourceCodeNodes.valuesArray()) {\n      node.dispose();\n    }\n\n    this.scriptsTree.removeChildren();\n    this.scriptsTree.setFocusable(false);\n    this.uiSourceCodeNodes.clear();\n    this.subfolderNodes.clear();\n    this.frameNodes.clear();\n    this.rootNode.reset();\n    this.authoredNode = undefined;\n    this.deployedNode = undefined;\n    if (!tearDownOnly) {\n      // Reset the workspace to repopulate filesystem folders.\n      this.resetWorkspace(Workspace.Workspace.WorkspaceImpl.instance());\n    }\n  }\n\n  handleContextMenu(_event: Event): void {\n  }\n\n  private async renameShortcut(): Promise<boolean> {\n    const selectedTreeElement = (this.scriptsTree.selectedTreeElement as NavigatorSourceTreeElement | null);\n    const node = selectedTreeElement?.node;\n    if (!node?.uiSourceCode()?.canRename()) {\n      return false;\n    }\n    this.rename(node, false);\n    return true;\n  }\n\n  private handleContextMenuCreate(\n      project: Workspace.Workspace.Project, path: Platform.DevToolsPath.EncodedPathString,\n      uiSourceCode?: Workspace.UISourceCode.UISourceCode): void {\n    if (uiSourceCode) {\n      const relativePath = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.relativePath(uiSourceCode);\n      relativePath.pop();\n      path = Common.ParsedURL.ParsedURL.join(relativePath, '/');\n    }\n    void this.create(project, path, uiSourceCode);\n  }\n\n  private handleContextMenuRename(node: NavigatorUISourceCodeTreeNode): void {\n    this.rename(node, false);\n  }\n\n  private async handleContextMenuExclude(\n      project: Workspace.Workspace.Project, path: Platform.DevToolsPath.EncodedPathString): Promise<void> {\n    const shouldExclude = await UI.UIUtils.ConfirmDialog.show(\n        i18nString(UIStrings.folderWillNotBeShown), i18nString(UIStrings.excludeThisFolder), undefined,\n        {jslogContext: 'exclude-folder-confirmation'});\n    if (shouldExclude) {\n      UI.UIUtils.startBatchUpdate();\n      project.excludeFolder(\n          Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.completeURL(project, path));\n      UI.UIUtils.endBatchUpdate();\n    }\n  }\n\n  private async handleContextMenuDelete(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const shouldDelete = await UI.UIUtils.ConfirmDialog.show(\n        i18nString(UIStrings.actionCannotBeUndone), i18nString(UIStrings.deleteThisFile), undefined,\n        {jslogContext: 'delete-file-confirmation'});\n    if (shouldDelete) {\n      uiSourceCode.project().deleteFile(uiSourceCode);\n    }\n  }\n\n  handleFileContextMenu(event: Event, node: NavigatorUISourceCodeTreeNode): void {\n    const uiSourceCode = node.uiSourceCode();\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    contextMenu.appendApplicableItems(uiSourceCode);\n\n    const project = uiSourceCode.project();\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      contextMenu.editSection().appendItem(\n          i18nString(UIStrings.rename), this.handleContextMenuRename.bind(this, node), {jslogContext: 'rename'});\n      contextMenu.editSection().appendItem(\n          i18nString(UIStrings.makeACopy),\n          this.handleContextMenuCreate.bind(this, project, Platform.DevToolsPath.EmptyEncodedPathString, uiSourceCode),\n          {jslogContext: 'make-a-copy'});\n      contextMenu.editSection().appendItem(\n          i18nString(UIStrings.delete), this.handleContextMenuDelete.bind(this, uiSourceCode),\n          {jslogContext: 'delete'});\n    }\n\n    void contextMenu.show();\n  }\n\n  private async handleDeleteFolder(node: NavigatorTreeNode): Promise<void> {\n    const shouldRemove = await UI.UIUtils.ConfirmDialog.show(\n        i18nString(UIStrings.actionCannotBeUndone), i18nString(UIStrings.deleteFolder), undefined,\n        {jslogContext: 'delete-folder-confirmation'});\n    if (shouldRemove) {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.OverrideTabDeleteFolderContextMenu);\n      const topNode = this.findTopNonMergedNode(node);\n      await this.removeUISourceCodeFromProject(topNode);\n      await this.deleteDirectoryRecursively(topNode);\n    }\n  }\n\n  private async removeUISourceCodeFromProject(node: NavigatorTreeNode): Promise<void> {\n    node.children().slice(0).forEach(async child => {\n      await this.removeUISourceCodeFromProject(child);\n    });\n\n    if (node instanceof NavigatorUISourceCodeTreeNode) {\n      node.uiSourceCode().project().removeUISourceCode(node.uiSourceCode().url());\n    }\n  }\n\n  private async deleteDirectoryRecursively(node: NavigatorTreeNode): Promise<void> {\n    if (!(node instanceof NavigatorFolderTreeNode)) {\n      return;\n    }\n\n    await Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance()\n        .project()\n        ?.deleteDirectoryRecursively(node.folderPath);\n  }\n\n  private findTopNonMergedNode(node: NavigatorTreeNode): NavigatorTreeNode {\n    // multiple folder nodes can be merged into one if it only contains one file\n    // e.g. the folder of \"abc.com/assets/css/button.css\" can be \"abc.com/assets/css\"\n    // find the top non-merged node (abc.com) recursively\n\n    if (!node.isMerged) {\n      return node;\n    }\n\n    if (!(node.parent instanceof NavigatorFolderTreeNode)) {\n      return node;\n    }\n\n    return this.findTopNonMergedNode(node.parent);\n  }\n\n  handleFolderContextMenu(event: Event, node: NavigatorFolderTreeNode): void {\n    const path = node.folderPath || Platform.DevToolsPath.EmptyEncodedPathString;\n    const project = node.project || null;\n\n    const contextMenu = new UI.ContextMenu.ContextMenu(event);\n    NavigatorView.appendSearchItem(contextMenu, path);\n\n    if (!project) {\n      return;\n    }\n\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      const folderPath = Common.ParsedURL.ParsedURL.urlToRawPathString(\n          Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.completeURL(project, path),\n          Host.Platform.isWin());\n      contextMenu.revealSection().appendItem(\n          i18nString(UIStrings.openFolder),\n          () => Host.InspectorFrontendHost.InspectorFrontendHostInstance.showItemInFolder(folderPath),\n          {jslogContext: 'open-folder'});\n      if (project.canCreateFile()) {\n        contextMenu.defaultSection().appendItem(i18nString(UIStrings.newFile), () => {\n          this.handleContextMenuCreate(project, path, undefined);\n        }, {jslogContext: 'new-file'});\n      }\n    } else if (node.origin && node.folderPath) {\n      const url = Common.ParsedURL.ParsedURL.concatenate(node.origin, '/', node.folderPath);\n      const options = {\n        isContentScript: node.recursiveProperties.exclusivelyContentScripts || false,\n        isKnownThirdParty: node.recursiveProperties.exclusivelyThirdParty || false,\n        isCurrentlyIgnoreListed: node.recursiveProperties.exclusivelyIgnored || false,\n      };\n      for (const {text, callback, jslogContext} of Bindings.IgnoreListManager.IgnoreListManager.instance()\n               .getIgnoreListFolderContextMenuItems(url, options)) {\n        contextMenu.defaultSection().appendItem(text, callback, {jslogContext});\n      }\n    }\n\n    if (project.canExcludeFolder(path)) {\n      contextMenu.defaultSection().appendItem(\n          i18nString(UIStrings.excludeFolder), this.handleContextMenuExclude.bind(this, project, path),\n          {jslogContext: 'exclude-folder'});\n    }\n\n    if (project.type() === Workspace.Workspace.projectTypes.FileSystem) {\n      const isFileOverrides =\n          (project as Persistence.FileSystemWorkspaceBinding.FileSystem).fileSystem().type() === 'overrides';\n\n      if (!isFileOverrides) {\n        if (node instanceof NavigatorGroupTreeNode) {\n          contextMenu.defaultSection().appendItem(i18nString(UIStrings.removeFolderFromWorkspace), async () => {\n            const header =\n                i18nString(UIStrings.areYouSureYouWantToRemoveThis, {PH1: (node as NavigatorGroupTreeNode).title});\n            const shouldRemove =\n                await UI.UIUtils.ConfirmDialog.show(i18nString(UIStrings.workspaceStopSyncing), header, undefined, {\n                  okButtonLabel: i18nString(UIStrings.remove),\n                  jslogContext: 'remove-folder-from-workspace-confirmation',\n                });\n            if (shouldRemove) {\n              project.remove();\n            }\n          }, {jslogContext: 'remove-folder-from-workspace'});\n        }\n      } else if (!(node instanceof NavigatorGroupTreeNode)) {\n        contextMenu.defaultSection().appendItem(\n            i18nString(UIStrings.delete), this.handleDeleteFolder.bind(this, node), {jslogContext: 'delete'});\n      }\n    }\n\n    void contextMenu.show();\n  }\n\n  rename(node: NavigatorUISourceCodeTreeNode, creatingNewUISourceCode: boolean): void {\n    const uiSourceCode = node.uiSourceCode();\n    node.rename(callback.bind(this));\n\n    function callback(this: NavigatorView, committed: boolean): void {\n      if (!creatingNewUISourceCode) {\n        return;\n      }\n      if (!committed) {\n        uiSourceCode.remove();\n      } else if (node.treeElement?.listItemElement.hasFocus()) {\n        this.sourceSelected(uiSourceCode, true);\n      }\n    }\n  }\n\n  async create(\n      project: Workspace.Workspace.Project, path: Platform.DevToolsPath.EncodedPathString,\n      uiSourceCodeToCopy?: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    let content = '';\n    if (uiSourceCodeToCopy) {\n      content = (await uiSourceCodeToCopy.requestContent()).content || '';\n    }\n    const uiSourceCode = await project.createFile(path, null, content);\n    if (!uiSourceCode) {\n      return;\n    }\n    this.sourceSelected(uiSourceCode, false);\n    const node = this.revealUISourceCode(uiSourceCode, true);\n    if (node) {\n      this.rename(node, true);\n    }\n  }\n\n  private groupingChanged(): void {\n    this.reset(true);\n    this.initGrouping();\n    // Reset the workspace to repopulate filesystem folders.\n    this.resetWorkspace(Workspace.Workspace.WorkspaceImpl.instance());\n    this.workspaceInternal.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n  }\n\n  private ignoreListChanged(): void {\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.JUST_MY_CODE)) {\n      this.groupingChanged();\n    } else {\n      this.rootNode.updateTitleRecursive();\n    }\n  }\n\n  private initGrouping(): void {\n    this.groupByFrame = true;\n    this.groupByDomain = this.navigatorGroupByFolderSetting.get();\n    this.groupByFolder = this.groupByDomain;\n    if (this.navigatorGroupByAuthoredExperiment) {\n      this.groupByAuthored = Root.Runtime.experiments.isEnabled(this.navigatorGroupByAuthoredExperiment);\n    } else {\n      this.groupByAuthored = false;\n    }\n  }\n\n  private resetForTest(): void {\n    this.reset();\n    this.workspaceInternal.uiSourceCodes().forEach(this.addUISourceCode.bind(this));\n  }\n\n  private discardFrame(frame: SDK.ResourceTreeModel.ResourceTreeFrame, isAuthored: boolean): void {\n    if (isAuthored) {\n      return;\n    }\n    const node = this.frameNodes.get(frame);\n    if (!node) {\n      return;\n    }\n\n    if (node.parent) {\n      node.parent.removeChild(node);\n    }\n    this.frameNodes.delete(frame);\n    for (const child of frame.childFrames) {\n      this.discardFrame(child, isAuthored);\n    }\n  }\n\n  targetAdded(_target: SDK.Target.Target): void {\n  }\n\n  targetRemoved(target: SDK.Target.Target): void {\n    const rootOrDeployed = this.rootOrDeployedNode();\n    const targetNode = rootOrDeployed.child('target:' + target.id());\n    if (targetNode) {\n      rootOrDeployed.removeChild(targetNode);\n    }\n  }\n\n  private targetNameChanged(event: Common.EventTarget.EventTargetEvent<SDK.Target.Target>): void {\n    const target = event.data;\n    const targetNode = this.rootOrDeployedNode().child('target:' + target.id());\n    if (targetNode) {\n      targetNode.setTitle(target.name());\n    }\n  }\n}\n\nconst boostOrderForNode = new WeakSet<UI.TreeOutline.TreeElement>();\n\nexport class NavigatorFolderTreeElement extends UI.TreeOutline.TreeElement {\n  private readonly nodeType: string;\n  private readonly navigatorView: NavigatorView;\n  private hoverCallback: ((arg0: boolean) => void)|undefined;\n  node!: NavigatorTreeNode;\n  private hovered?: boolean;\n  private isIgnoreListed?: boolean;\n  private isFromSourceMap: boolean;\n\n  constructor(navigatorView: NavigatorView, type: string, title: string, hoverCallback?: ((arg0: boolean) => void)) {\n    super('', true, NavigatorFolderTreeElement.#contextForType(type));\n    this.listItemElement.classList.add('navigator-' + type + '-tree-item', 'navigator-folder-tree-item');\n    UI.ARIAUtils.setLabel(this.listItemElement, `${title}, ${type}`);\n    this.nodeType = type;\n    this.title = title;\n    this.tooltip = title;\n    this.navigatorView = navigatorView;\n    this.hoverCallback = hoverCallback;\n    this.isFromSourceMap = false;\n\n    let iconType = 'folder';\n\n    if (type === Types.Domain) {\n      iconType = 'cloud';\n    } else if (type === Types.Frame) {\n      iconType = 'frame';\n    } else if (type === Types.Worker) {\n      iconType = 'gears';\n    } else if (type === Types.Authored) {\n      iconType = 'code';\n    } else if (type === Types.Deployed) {\n      iconType = 'deployed';\n    }\n\n    const icon = IconButton.Icon.create(iconType);\n    this.setLeadingIcons([icon]);\n  }\n\n  override async onpopulate(): Promise<void> {\n    this.node.populate();\n  }\n\n  override onattach(): void {\n    this.collapse();\n    this.node.onattach();\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n    this.listItemElement.addEventListener('mousemove', this.mouseMove.bind(this), false);\n    this.listItemElement.addEventListener('mouseleave', this.mouseLeave.bind(this), false);\n  }\n\n  setIgnoreListed(isIgnoreListed: boolean): void {\n    if (this.isIgnoreListed !== isIgnoreListed) {\n      this.isIgnoreListed = isIgnoreListed;\n      this.listItemElement.classList.toggle('is-ignore-listed', isIgnoreListed);\n      this.updateTooltip();\n    }\n  }\n\n  setFromSourceMap(isFromSourceMap: boolean): void {\n    this.isFromSourceMap = isFromSourceMap;\n    this.listItemElement.classList.toggle('is-from-source-map', isFromSourceMap);\n  }\n\n  setNode(node: NavigatorTreeNode): void {\n    this.node = node;\n    this.updateTooltip();\n    UI.ARIAUtils.setLabel(this.listItemElement, `${this.title}, ${this.nodeType}`);\n  }\n\n  private updateTooltip(): void {\n    if (this.node.tooltip) {\n      this.tooltip = this.node.tooltip;\n    } else {\n      const paths = [];\n      let currentNode: NavigatorTreeNode|null = this.node;\n      while (currentNode && !currentNode.isRoot() && currentNode.type === this.node.type) {\n        paths.push(currentNode.title);\n        currentNode = currentNode.parent;\n      }\n      paths.reverse();\n      let tooltip = paths.join('/');\n      if (this.isIgnoreListed) {\n        tooltip = i18nString(UIStrings.sIgnoreListed, {PH1: tooltip});\n      }\n      this.tooltip = tooltip;\n    }\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    if (!this.node) {\n      return;\n    }\n    this.select();\n    this.navigatorView.handleFolderContextMenu(event, this.node as NavigatorFolderTreeNode);\n  }\n\n  private mouseMove(_event: Event): void {\n    if (this.hovered || !this.hoverCallback) {\n      return;\n    }\n    this.hovered = true;\n    this.hoverCallback(true);\n  }\n\n  private mouseLeave(_event: Event): void {\n    if (!this.hoverCallback) {\n      return;\n    }\n    this.hovered = false;\n    this.hoverCallback(false);\n  }\n\n  static #contextForType(type: string): string {\n    switch (type) {\n      case Types.Domain:\n        return 'domain';\n      case Types.Frame:\n        return 'frame';\n      case Types.Worker:\n        return 'worker';\n      case Types.Authored:\n        return 'authored';\n      case Types.Deployed:\n        return 'deployed';\n    }\n    return 'folder';\n  }\n}\n\nexport class NavigatorSourceTreeElement extends UI.TreeOutline.TreeElement {\n  readonly nodeType: string;\n  readonly node: NavigatorUISourceCodeTreeNode;\n  private readonly navigatorView: NavigatorView;\n  uiSourceCodeInternal: Workspace.UISourceCode.UISourceCode;\n  private aiButtonContainer?: HTMLElement;\n\n  constructor(\n      navigatorView: NavigatorView, uiSourceCode: Workspace.UISourceCode.UISourceCode, title: string,\n      node: NavigatorUISourceCodeTreeNode) {\n    super('', false, uiSourceCode.contentType().name());\n    this.nodeType = Types.File;\n    this.node = node;\n    this.title = title;\n    this.listItemElement.classList.add(\n        'navigator-' + uiSourceCode.contentType().name() + '-tree-item', 'navigator-file-tree-item');\n    this.tooltip = uiSourceCode.url();\n    UI.ARIAUtils.setLabel(this.listItemElement, `${uiSourceCode.name()}, ${this.nodeType}`);\n    Common.EventTarget.fireEvent('source-tree-file-added', uiSourceCode.fullDisplayName());\n    this.navigatorView = navigatorView;\n    this.uiSourceCodeInternal = uiSourceCode;\n    this.updateIcon();\n    (this.titleElement as HTMLElement).setAttribute('jslog', `${VisualLogging.value('title').track({change: true})}`);\n  }\n\n  updateIcon(): void {\n    const icon = PanelUtils.getIconForSourceFile(this.uiSourceCodeInternal);\n    this.setLeadingIcons([icon]);\n  }\n\n  updateAccessibleName(): void {\n    UI.ARIAUtils.setLabel(this.listItemElement, `${this.uiSourceCodeInternal.name()}, ${this.nodeType}`);\n  }\n\n  private createAiButton(): void {\n    if (!UI.ActionRegistry.ActionRegistry.instance().hasAction('drjones.sources-floating-button')) {\n      return;\n    }\n    if (!this.uiSourceCode.contentType().isTextType() ||\n        Snippets.ScriptSnippetFileSystem.isSnippetsUISourceCode(this.uiSourceCode)) {\n      return;\n    }\n    const action = UI.ActionRegistry.ActionRegistry.instance().getAction('drjones.sources-floating-button');\n    if (!this.aiButtonContainer) {\n      this.aiButtonContainer = this.listItemElement.createChild('span', 'ai-button-container');\n      const floatingButton = new FloatingButton.FloatingButton.FloatingButton({\n        title: action.title(),\n        iconName: 'smart-assistant',\n      });\n      floatingButton.addEventListener('click', ev => {\n        ev.stopPropagation();\n        this.navigatorView.sourceSelected(this.uiSourceCode, false);\n        void action.execute();\n      }, {capture: true});\n      floatingButton.addEventListener('mousedown', ev => {\n        ev.stopPropagation();\n      }, {capture: true});\n      this.aiButtonContainer.appendChild(floatingButton);\n    }\n  }\n\n  get uiSourceCode(): Workspace.UISourceCode.UISourceCode {\n    return this.uiSourceCodeInternal;\n  }\n\n  override onattach(): void {\n    this.listItemElement.draggable = true;\n    this.listItemElement.addEventListener('click', this.onclick.bind(this), false);\n    this.listItemElement.addEventListener('contextmenu', this.handleContextMenuEvent.bind(this), false);\n    this.listItemElement.addEventListener('dragstart', this.ondragstart.bind(this), false);\n    this.createAiButton();\n  }\n\n  private shouldRenameOnMouseDown(): boolean {\n    if (!this.uiSourceCodeInternal.canRename()) {\n      return false;\n    }\n    if (!this.treeOutline) {\n      return false;\n    }\n    const isSelected = this === this.treeOutline.selectedTreeElement;\n    return isSelected && this.treeOutline.element.hasFocus() && !UI.UIUtils.isBeingEdited(this.treeOutline.element);\n  }\n\n  override selectOnMouseDown(event: MouseEvent): void {\n    if (event.which !== 1 || !this.shouldRenameOnMouseDown()) {\n      super.selectOnMouseDown(event);\n      return;\n    }\n    window.setTimeout(rename.bind(this), 300);\n\n    function rename(this: NavigatorSourceTreeElement): void {\n      if (this.shouldRenameOnMouseDown()) {\n        this.navigatorView.rename(this.node, false);\n      }\n    }\n  }\n\n  private ondragstart(event: DragEvent): void {\n    if (!event.dataTransfer) {\n      return;\n    }\n    event.dataTransfer.setData('text/plain', this.uiSourceCodeInternal.url());\n    event.dataTransfer.effectAllowed = 'copy';\n  }\n\n  override onspace(): boolean {\n    this.navigatorView.sourceSelected(this.uiSourceCode, true);\n    return true;\n  }\n\n  private onclick(_event: Event): void {\n    this.navigatorView.sourceSelected(this.uiSourceCode, false);\n  }\n\n  override ondblclick(event: Event): boolean {\n    const middleClick = (event as MouseEvent).button === 1;\n    this.navigatorView.sourceSelected(this.uiSourceCode, !middleClick);\n    return false;\n  }\n\n  override onenter(): boolean {\n    this.navigatorView.sourceSelected(this.uiSourceCode, true);\n    return true;\n  }\n\n  override ondelete(): boolean {\n    return true;\n  }\n\n  private handleContextMenuEvent(event: Event): void {\n    this.select();\n    this.navigatorView.handleFileContextMenu(event, this.node);\n  }\n}\n\nexport interface NavigatorRecursiveTreeNodeProperties {\n  exclusivelySourceMapped: boolean|null;\n  exclusivelyIgnored: boolean|null;\n  exclusivelyThirdParty: boolean|null;\n  exclusivelyContentScripts: boolean|null;\n}\n\nexport class NavigatorTreeNode {\n  id: string;\n  protected navigatorView: NavigatorView;\n  type: string;\n  private populated: boolean;\n  isMerged: boolean;\n  parent!: NavigatorTreeNode|null;\n  title!: string;\n  tooltip?: string;\n  recursiveProperties: NavigatorRecursiveTreeNodeProperties;\n\n  #children: NavigatorTreeNode[] = [];\n  readonly #childById = new Map<string, NavigatorTreeNode>();\n\n  constructor(navigatorView: NavigatorView, id: string, type: string, tooltip?: string) {\n    this.id = id;\n    this.navigatorView = navigatorView;\n    this.type = type;\n    this.tooltip = tooltip;\n\n    this.populated = false;\n    this.isMerged = false;\n    this.recursiveProperties = {\n      exclusivelySourceMapped: null,\n      exclusivelyIgnored: null,\n      exclusivelyContentScripts: null,\n      exclusivelyThirdParty: null,\n    };\n  }\n\n  treeNode(): UI.TreeOutline.TreeElement {\n    throw new Error('Not implemented');\n  }\n\n  dispose(): void {\n  }\n\n  updateTitle(): void {\n  }\n\n  updateTitleRecursive(): void {\n    for (const child of this.children()) {\n      child.updateTitleRecursive();\n    }\n    this.updateTitle();\n  }\n\n  updateTitleBubbleUp(): void {\n    this.updateTitle();\n    if (this.parent) {\n      this.parent.updateTitleBubbleUp();\n    }\n  }\n\n  isRoot(): boolean {\n    return false;\n  }\n\n  hasChildren(): boolean {\n    return true;\n  }\n\n  onattach(): void {\n  }\n\n  setTitle(_title: string): void {\n    throw new Error('Not implemented');\n  }\n\n  populate(): void {\n    if (this.isPopulated()) {\n      return;\n    }\n    if (this.parent) {\n      this.parent.populate();\n    }\n    this.populated = true;\n    this.wasPopulated();\n  }\n\n  wasPopulated(): void {\n    const children = this.children();\n    for (let i = 0; i < children.length; ++i) {\n      this.navigatorView.appendChild(this.treeNode(), (children[i].treeNode()));\n    }\n  }\n\n  didAddChild(node: NavigatorTreeNode): void {\n    if (this.isPopulated()) {\n      this.navigatorView.appendChild(this.treeNode(), (node.treeNode()));\n    }\n  }\n\n  willRemoveChild(node: NavigatorTreeNode): void {\n    if (this.isPopulated()) {\n      this.navigatorView.removeChild(this.treeNode(), (node.treeNode()));\n    }\n  }\n\n  isPopulated(): boolean {\n    return this.populated;\n  }\n\n  isEmpty(): boolean {\n    return !this.#children.length;\n  }\n\n  children(): readonly NavigatorTreeNode[] {\n    return this.#children;\n  }\n\n  child(id: string): NavigatorTreeNode|null {\n    return this.#childById.get(id) ?? null;\n  }\n\n  appendChild(node: NavigatorTreeNode): void {\n    this.#children.push(node);\n    this.#childById.set(node.id, node);\n    node.parent = this;\n    this.didAddChild(node);\n  }\n\n  removeChild(node: NavigatorTreeNode): void {\n    this.willRemoveChild(node);\n    const idx = this.#children.findIndex(n => n.id === node.id);\n    if (idx >= 0) {\n      this.#children.splice(idx, 1);\n    }\n    this.#childById.delete(node.id);\n    node.parent = null;\n    node.dispose();\n  }\n\n  reset(): void {\n    this.#children = [];\n    this.#childById.clear();\n  }\n\n  updateId(newId: string): void {\n    if (this.parent) {\n      this.parent.#childById.delete(this.id);\n      this.parent.#childById.set(newId, this);\n    }\n    this.id = newId;\n  }\n}\n\nexport class NavigatorRootTreeNode extends NavigatorTreeNode {\n  constructor(navigatorView: NavigatorView) {\n    super(navigatorView, '', Types.Root);\n  }\n\n  override isRoot(): boolean {\n    return true;\n  }\n\n  override treeNode(): UI.TreeOutline.TreeElement {\n    return this.navigatorView.scriptsTree.rootElement();\n  }\n}\n\nexport class NavigatorUISourceCodeTreeNode extends NavigatorTreeNode {\n  uiSourceCodeInternal: Workspace.UISourceCode.UISourceCode;\n  treeElement: NavigatorSourceTreeElement|null;\n  private eventListeners: Common.EventTarget.EventDescriptor[];\n  private readonly frameInternal: SDK.ResourceTreeModel.ResourceTreeFrame|null;\n  constructor(\n      navigatorView: NavigatorView, uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      frame: SDK.ResourceTreeModel.ResourceTreeFrame|null) {\n    super(navigatorView, 'UISourceCode:' + uiSourceCode.canononicalScriptId(), Types.File);\n    this.uiSourceCodeInternal = uiSourceCode;\n    this.treeElement = null;\n    this.eventListeners = [];\n    this.frameInternal = frame;\n    this.recursiveProperties.exclusivelySourceMapped = uiSourceCode.contentType().isFromSourceMap();\n    if (uiSourceCode.contentType().isScript()) {\n      // These properties affect ignore-listing menus and only matter when the UISourceCode is a script\n      this.recursiveProperties.exclusivelyThirdParty = uiSourceCode.isKnownThirdParty();\n      this.recursiveProperties.exclusivelyContentScripts =\n          uiSourceCode.project().type() === Workspace.Workspace.projectTypes.ContentScripts;\n    }\n  }\n\n  frame(): SDK.ResourceTreeModel.ResourceTreeFrame|null {\n    return this.frameInternal;\n  }\n\n  uiSourceCode(): Workspace.UISourceCode.UISourceCode {\n    return this.uiSourceCodeInternal;\n  }\n\n  override treeNode(): UI.TreeOutline.TreeElement {\n    if (this.treeElement) {\n      return this.treeElement;\n    }\n\n    this.treeElement = new NavigatorSourceTreeElement(this.navigatorView, this.uiSourceCodeInternal, '', this);\n    this.updateTitle();\n\n    const updateTitleBound = this.updateTitle.bind(this, undefined);\n    this.eventListeners = [\n      this.uiSourceCodeInternal.addEventListener(Workspace.UISourceCode.Events.TitleChanged, updateTitleBound),\n      this.uiSourceCodeInternal.addEventListener(Workspace.UISourceCode.Events.WorkingCopyChanged, updateTitleBound),\n      this.uiSourceCodeInternal.addEventListener(Workspace.UISourceCode.Events.WorkingCopyCommitted, updateTitleBound),\n    ];\n    return this.treeElement;\n  }\n\n  override updateTitle(ignoreIsDirty?: boolean): void {\n    const isIgnoreListed =\n        Bindings.IgnoreListManager.IgnoreListManager.instance().isUserOrSourceMapIgnoreListedUISourceCode(\n            this.uiSourceCodeInternal);\n    if (this.uiSourceCodeInternal.contentType().isScript() || isIgnoreListed) {\n      this.recursiveProperties.exclusivelyIgnored = isIgnoreListed;\n    }\n\n    if (!this.treeElement) {\n      return;\n    }\n\n    let titleText = this.uiSourceCodeInternal.displayName();\n    if (!ignoreIsDirty && this.uiSourceCodeInternal.isDirty()) {\n      titleText = '*' + titleText;\n    }\n\n    this.treeElement.title = titleText;\n    this.treeElement.updateIcon();\n\n    this.treeElement.listItemElement.classList.toggle('is-ignore-listed', isIgnoreListed);\n\n    let tooltip: string = this.uiSourceCodeInternal.url();\n    if (this.uiSourceCodeInternal.contentType().isFromSourceMap()) {\n      tooltip = i18nString(UIStrings.sFromSourceMap, {PH1: this.uiSourceCodeInternal.displayName()});\n    }\n    if (isIgnoreListed) {\n      tooltip = i18nString(UIStrings.sIgnoreListed, {PH1: tooltip});\n    }\n\n    this.treeElement.tooltip = tooltip;\n    this.treeElement.updateAccessibleName();\n\n    this.updateId('UISourceCode:' + this.uiSourceCodeInternal.canononicalScriptId());\n  }\n\n  override hasChildren(): boolean {\n    return false;\n  }\n\n  override dispose(): void {\n    Common.EventTarget.removeEventListeners(this.eventListeners);\n  }\n\n  reveal(select?: boolean): void {\n    if (this.parent) {\n      this.parent.populate();\n      this.parent.treeNode().expand();\n    }\n    if (this.treeElement) {\n      this.treeElement.reveal(true);\n      if (select) {\n        this.treeElement.select(true);\n      }\n    }\n  }\n\n  rename(callback?: ((committed: boolean) => void)): void {\n    if (!this.treeElement) {\n      return;\n    }\n\n    this.treeElement.listItemElement.focus();\n\n    if (!this.treeElement.treeOutline) {\n      return;\n    }\n\n    // Tree outline should be marked as edited as well as the tree element to prevent search from starting.\n    const treeOutlineElement = this.treeElement.treeOutline.element;\n    UI.UIUtils.markBeingEdited(treeOutlineElement, true);\n\n    const commitHandler = (_element: Element, newTitle: string, oldTitle: string|null): void => {\n      if (newTitle !== oldTitle) {\n        if (this.treeElement) {\n          this.treeElement.title = newTitle;\n        }\n        // necessary cast to RawPathString as alternative would be altering type of Config<T>\n        void this.uiSourceCodeInternal.rename(newTitle as Platform.DevToolsPath.RawPathString).then(renameCallback);\n        return;\n      }\n      afterEditing(true);\n    };\n\n    const renameCallback = (success: boolean): void => {\n      if (!success) {\n        UI.UIUtils.markBeingEdited(treeOutlineElement, false);\n        this.updateTitle();\n        this.rename(callback);\n        return;\n      }\n      if (this.treeElement) {\n        const {parent} = this.treeElement;\n        if (parent) {\n          parent.removeChild(this.treeElement);\n          parent.appendChild(this.treeElement);\n          this.treeElement.select();\n        }\n      }\n      afterEditing(true);\n    };\n\n    const afterEditing = (committed: boolean): void => {\n      UI.UIUtils.markBeingEdited(treeOutlineElement, false);\n      this.updateTitle();\n      if (callback) {\n        callback(committed);\n      }\n    };\n\n    this.updateTitle(true);\n    this.treeElement.startEditingTitle(\n        new UI.InplaceEditor.Config(commitHandler, () => afterEditing(false), undefined));\n  }\n}\n\nexport class NavigatorFolderTreeNode extends NavigatorTreeNode {\n  project: Workspace.Workspace.Project|null;\n  readonly folderPath: Platform.DevToolsPath.EncodedPathString;\n  readonly origin: Platform.DevToolsPath.UrlString;\n  override title: string;\n  treeElement!: NavigatorFolderTreeElement|null;\n  constructor(\n      navigatorView: NavigatorView, project: Workspace.Workspace.Project|null, id: string, type: string,\n      folderPath: Platform.DevToolsPath.EncodedPathString, title: string, origin: Platform.DevToolsPath.UrlString) {\n    super(navigatorView, id, type);\n    this.project = project;\n    this.folderPath = folderPath;\n    this.title = title;\n    this.origin = origin;\n  }\n\n  override treeNode(): UI.TreeOutline.TreeElement {\n    if (this.treeElement) {\n      return this.treeElement;\n    }\n    this.treeElement = this.createTreeElement(this.title, this);\n    this.updateTitle();\n    return this.treeElement;\n  }\n\n  override updateTitle(): void {\n    let propName: keyof NavigatorRecursiveTreeNodeProperties;\n    for (propName in this.recursiveProperties) {\n      let propValue: boolean|null = null;\n      for (const child of this.children()) {\n        if (child.recursiveProperties[propName] === false) {\n          propValue = false;\n          break;\n        } else if (child.recursiveProperties[propName]) {\n          propValue = true;\n        }\n      }\n      this.recursiveProperties[propName] = propValue;\n    }\n\n    if (!this.treeElement) {\n      return;\n    }\n\n    this.treeElement.setFromSourceMap(this.recursiveProperties.exclusivelySourceMapped || false);\n    this.treeElement.setIgnoreListed(this.recursiveProperties.exclusivelyIgnored || false);\n\n    if (!this.project || this.project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n\n    const absoluteFileSystemPath = Common.ParsedURL.ParsedURL.concatenate(\n        Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemPath(\n            this.project.id() as Platform.DevToolsPath.UrlString),\n        '/', this.folderPath);\n    const hasMappedFiles =\n        Persistence.Persistence.PersistenceImpl.instance().filePathHasBindings(absoluteFileSystemPath);\n    this.treeElement.listItemElement.classList.toggle('has-mapped-files', hasMappedFiles);\n  }\n\n  private createTreeElement(title: string, node: NavigatorTreeNode): NavigatorFolderTreeElement {\n    const treeElement = new NavigatorFolderTreeElement(this.navigatorView, this.type, title);\n    treeElement.setNode(node);\n    return treeElement;\n  }\n\n  override wasPopulated(): void {\n    if (!this.treeElement || this.treeElement.node !== this) {\n      return;\n    }\n    this.addChildrenRecursive();\n  }\n\n  private addChildrenRecursive(): void {\n    const children = this.children();\n    for (let i = 0; i < children.length; ++i) {\n      const child = children[i];\n      this.didAddChild(child);\n      if (child instanceof NavigatorFolderTreeNode) {\n        child.addChildrenRecursive();\n      }\n    }\n  }\n\n  private shouldMerge(node: NavigatorTreeNode): boolean {\n    return this.type !== Types.Domain && node instanceof NavigatorFolderTreeNode;\n  }\n\n  override didAddChild(node: NavigatorTreeNode): void {\n    if (!this.treeElement) {\n      return;\n    }\n\n    let children = this.children();\n\n    if (children.length === 1 && this.shouldMerge(node)) {\n      node.isMerged = true;\n      this.treeElement.title = this.treeElement.title + '/' + node.title;\n      (node as NavigatorFolderTreeNode).treeElement = this.treeElement;\n      node.updateTitle();\n      this.treeElement.setNode(node);\n      return;\n    }\n\n    let oldNode;\n    if (children.length === 2) {\n      oldNode = children[0] !== node ? children[0] : children[1];\n    }\n    if (oldNode?.isMerged) {\n      oldNode.isMerged = false;\n      const mergedToNodes = [];\n      mergedToNodes.push(this);\n      let treeNode: (NavigatorTreeNode|null)|NavigatorTreeNode|this = this;\n      while (treeNode && treeNode.isMerged) {\n        treeNode = treeNode.parent;\n        if (treeNode) {\n          mergedToNodes.push(treeNode);\n        }\n      }\n      mergedToNodes.reverse();\n      const titleText = mergedToNodes.map(node => node.title).join('/');\n\n      const nodes = [];\n      treeNode = oldNode;\n      do {\n        nodes.push(treeNode);\n        children = treeNode.children();\n        treeNode = children.length === 1 ? children[0] : null;\n      } while (treeNode?.isMerged);\n\n      if (!this.isPopulated()) {\n        this.treeElement.title = titleText;\n        this.treeElement.setNode(this);\n        for (let i = 0; i < nodes.length; ++i) {\n          (nodes[i] as NavigatorFolderTreeNode).treeElement = null;\n          nodes[i].isMerged = false;\n        }\n        this.updateTitle();\n        return;\n      }\n      const oldTreeElement = this.treeElement;\n      const treeElement = this.createTreeElement(titleText, this);\n      for (let i = 0; i < mergedToNodes.length; ++i) {\n        (mergedToNodes[i] as NavigatorFolderTreeNode).treeElement = treeElement;\n        mergedToNodes[i].updateTitle();\n      }\n      if (oldTreeElement.parent) {\n        this.navigatorView.appendChild(oldTreeElement.parent, treeElement);\n      }\n\n      oldTreeElement.setNode(nodes[nodes.length - 1]);\n      oldTreeElement.title = nodes.map(node => node.title).join('/');\n      if (oldTreeElement.parent) {\n        this.navigatorView.removeChild(oldTreeElement.parent, oldTreeElement);\n      }\n      this.navigatorView.appendChild(this.treeElement, oldTreeElement);\n      if (oldTreeElement.expanded) {\n        treeElement.expand();\n      }\n      this.updateTitle();\n    }\n    if (this.isPopulated()) {\n      this.navigatorView.appendChild(this.treeElement, node.treeNode());\n    }\n  }\n\n  override willRemoveChild(node: NavigatorTreeNode): void {\n    const actualNode = (node as NavigatorFolderTreeNode);\n    if (actualNode.isMerged || !this.isPopulated() || !this.treeElement || !actualNode.treeElement) {\n      return;\n    }\n    this.navigatorView.removeChild(this.treeElement, actualNode.treeElement);\n  }\n}\n\nexport class NavigatorGroupTreeNode extends NavigatorTreeNode {\n  private readonly project: Workspace.Workspace.Project|null;\n  override title: string;\n  private hoverCallback?: ((arg0: boolean) => void);\n  private treeElement?: NavigatorFolderTreeElement;\n  constructor(\n      navigatorView: NavigatorView, project: Workspace.Workspace.Project|null, id: string, type: string, title: string,\n      tooltip?: string) {\n    super(navigatorView, id, type, tooltip);\n    this.project = project;\n    this.title = title;\n    this.populate();\n  }\n\n  setHoverCallback(hoverCallback: (arg0: boolean) => void): void {\n    this.hoverCallback = hoverCallback;\n  }\n\n  override treeNode(): UI.TreeOutline.TreeElement {\n    if (this.treeElement) {\n      return this.treeElement;\n    }\n    this.treeElement = new NavigatorFolderTreeElement(this.navigatorView, this.type, this.title, this.hoverCallback);\n    this.treeElement.setNode(this);\n    return this.treeElement;\n  }\n\n  override onattach(): void {\n    this.updateTitle();\n  }\n\n  override updateTitle(): void {\n    if (!this.treeElement || !this.project || this.project.type() !== Workspace.Workspace.projectTypes.FileSystem) {\n      return;\n    }\n    const fileSystemPath = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemPath(\n        this.project.id() as Platform.DevToolsPath.UrlString);\n    const wasActive = this.treeElement.listItemElement.classList.contains('has-mapped-files');\n    const isActive = Persistence.Persistence.PersistenceImpl.instance().filePathHasBindings(fileSystemPath);\n    if (wasActive === isActive) {\n      return;\n    }\n    this.treeElement.listItemElement.classList.toggle('has-mapped-files', isActive);\n    if (this.treeElement.childrenListElement.hasFocus()) {\n      return;\n    }\n    if (isActive) {\n      this.treeElement.expand();\n    } else {\n      this.treeElement.collapse();\n    }\n  }\n\n  override setTitle(title: string): void {\n    this.title = title;\n    if (this.treeElement) {\n      this.treeElement.title = this.title;\n    }\n  }\n}\n\n"],"names":[],"mappings":"AAAA","file":"crbug-402769806.js"}
